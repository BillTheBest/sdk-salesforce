/*!
Copyright 2015 ManyWho, Inc.
Licensed under the ManyWho License, Version 1.0 (the "License"); you may not use this
file except in compliance with the License.
You may obtain a copy of the License at: http://manywho.com/sharedsource
Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied. See the License for the specific language governing
permissions and limitations under the License.
*/
/// <reference path="../../typings/index.d.ts" />
(function (manywho) {
    var navigation = React.createClass({
        getItem: function (items, id) {
            for (var itemId in items) {
                if (itemId === id)
                    return items[id];
                else {
                    var item = items[itemId];
                    if (item.items) {
                        var foundItem = this.getItem(item.items, id);
                        if (foundItem)
                            return foundItem;
                    }
                }
            }
        },
        getHeaderElement: function (id, navigation) {
            var children = [
                React.createElement("button", {className: "navbar-toggle collapsed", "data-toggle": "collapse", "data-target": '#' + id, ref: "toggle"}, React.createElement("span", {className: "sr-only"}, "Toggle Navigation"), React.createElement("span", {className: "icon-bar"}), React.createElement("span", {className: "icon-bar"}), React.createElement("span", {className: "icon-bar"}))
            ];
            if (navigation.label != null && navigation.label.trim().length > 0)
                children.push(React.createElement("a", {className: "navbar-brand", href: "#"}, navigation.label));
            return React.createElement("div", {className: "navbar-header"}, children);
        },
        getNavElements: function (items, isTopLevel) {
            var elements = [];
            for (var itemId in items) {
                var item = items[itemId];
                var element = null;
                var classNames = [
                    (item.isCurrent) ? 'active' : '',
                    (item.isVisible == false) ? 'hidden' : '',
                    (item.isEnabled) ? '' : 'disabled',
                    (isTopLevel) ? 'top-nav-element' : ''
                ];
                if (item.items != null) {
                    classNames.push('dropdown');
                    element = React.createElement("li", {className: classNames.join(' ')}, React.createElement("a", {href: "#", id: item.id, "data-toggle": "dropdown"}, item.label, React.createElement("span", {className: "caret"})), React.createElement("ul", {className: "dropdown-menu"}, this.getNavElements(item.items, false)));
                }
                else
                    element = React.createElement("li", {className: classNames.join(' ')}, React.createElement("a", {href: "#", onClick: this.onClick.bind(null, item), id: item.id}, item.label));
                elements.push(element);
            }
            return elements;
        },
        onClick: function (item) {
            if (!item.isEnabled)
                return false;
            if (this.refs.toggle && !manywho.utils.isEqual(window.getComputedStyle(this.refs.toggle).display, 'none', true))
                this.refs.toggle.click();
            manywho.engine.navigate(this.props.id, item.id, null, this.props.flowKey);
        },
        render: function () {
            var _this = this;
            var navigation = manywho.model.getNavigation(this.props.id, this.props.flowKey);
            if (navigation && navigation.isVisible) {
                manywho.log.info("Rendering Navigation");
                var navElements = this.getNavElements(navigation.items, true);
                navElements = navElements.concat(manywho.settings.global('navigation.components') || []);
                navElements = navElements.concat(manywho.settings.flow('navigation.components', this.props.flowKey) || []);
                var returnToParent = navigation.returnToParent || null;
                if (!manywho.settings.global('navigation.isWizard', this.props.flowKey, true)) {
                    var innerClassName = '';
                    if (!this.props.isFullWidth)
                        innerClassName += ' container';
                    return (React.createElement("nav", {className: "navbar navbar-default", ref: "navigationBar"}, React.createElement("div", {className: innerClassName}, this.getHeaderElement(this.props.id, navigation), React.createElement("div", {className: "collapse navbar-collapse", id: this.props.id, ref: "container"}, React.createElement("ul", {className: "nav navbar-nav"}, navElements), returnToParent))));
                }
                else {
                    return React.createElement("div", {className: "navbar-chevrons"}, (!manywho.utils.isNullOrWhitespace(navigation.label) ? React.createElement("span", {className: "navbar-brand"}, navigation.label) : null), React.createElement("ul", {className: "chevrons"}, manywho.utils.convertToArray(navigation.items)
                        .filter(function (item) { return item.isVisible; })
                        .map(function (item) {
                        var className = null;
                        if (item.isCurrent)
                            className += ' active';
                        if (item.isEnabled === false)
                            className += ' disabled';
                        if (item.tags) {
                            var tag = item.tags.find(function (tag) { return manywho.utils.isEqual(tag.developerName, 'isComplete', true); });
                            if (tag && manywho.utils.isEqual(tag.contentValue, 'false', true))
                                className += ' active';
                        }
                        return React.createElement("li", {onClick: _this.onClick.bind(null, item), id: item.id, className: className}, React.createElement("a", {href: "#"}, item.label));
                    })), returnToParent);
                }
            }
            return null;
        }
    });
    manywho.component.register("navigation", navigation);
}(manywho));

//# sourceMappingURL=data:application/json;base64,
